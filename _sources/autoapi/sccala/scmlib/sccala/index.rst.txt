:py:mod:`sccala.scmlib.sccala`
==============================

.. py:module:: sccala.scmlib.sccala


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   sccala.scmlib.sccala.SccalaSCM




.. py:class:: SccalaSCM(file, calib='CALIB', blind=True, blindkey='HUBBLE')

   .. py:method:: sample(model, log_dir='log_dir', chains=4, iters=1000, warmup=1000, save_warmup=False, quiet=False, init=None, classic=False)

      Samples the posterior for the given data and model

      Parameters
      ----------
      model : SCM_Model
          Model for which to fit the data
      log_dir : str
          Directory in which to save sampling output. If None is passed,
          result will not be saved. Default: log_dir
      chains : int
          Number of chains used in STAN fit. Default: 4
      iters : int
          Number of iterations used in STAN fit. Default: 1000
      warmup : int
          Number of iterations used in STAN fit as warmup. Default: 1000
      save_warmup : bool
          If True, warmup elements of chain will be saved as well. Default: False
      quiet : bool
          Enables/ disables output statements after sampling has
          finished. Default: False
      classic : bool
          Switches classic mode on if True. In classic mode, a/e input is
          ignored.

      Returns
      -------
      posterior : pandas DataFrame
          Result of the STAN sampling


   .. py:method:: __save_samples__(df, log_dir='log_dir', norm=None)

      Exports sample data


   .. py:method:: cornerplot(save=None, classic=False)

      Plots the cornerplot of the posterior

      Parameters
      ----------
      save : str
          Specified where the generated cornerplot will be saved.
      classic : bool
          Switches classic mode on if True. In classic mode, a/e input is
          ignored.

      Returns
      -------
      None



